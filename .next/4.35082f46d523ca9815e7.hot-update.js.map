{"version":3,"file":"4.35082f46d523ca9815e7.hot-update.js","sources":["webpack:///pages/index.jsx"],"sourcesContent":["import ParticleArea from '../components/ParticleArea'\nimport DebugControls from '../components/DebugControls'\nimport Emoji from '../components/Emoji'\nimport LevelProgressBar from '../components/LevelProgressBar'\nimport React from 'react'\nimport Head from 'next/head'\nimport css from 'styled-jsx/css'\nimport { EMOTION_CONTENT, EMOTION_ANGRY, EMOTION_SAD, EMOTION_HAPPY, EMOTION_SUPRISED, SceneWaitingToStart, SceneLevel, SceneFinished, GAME_LENGTH_IN_SECONDS } from '../game'\nimport ScoreDisplay from '../components/ScoreDisplay';\nimport { DateTime } from 'luxon'\n\nconst MODE_WAITING_TO_START = 'WAITING_TO_START'\nconst MODE_PLAYING_LEVEL = 'PLAYING_LEVEL'\nconst MODE_FINISHED = 'FINISHED'\n\nconst _DefaultState = {\n  mode: MODE_WAITING_TO_START,\n  level: null,\n  points: 0,\n  lastInputEmotion: EMOTION_CONTENT,\n}\n\nconst CSS = css`\nhtml, body, #__next, .board {\n  height: 100%;\n  font-family: Roboto, sans-serif;\n}\n\nbody {\n  background: black;\n  margin: 0;\n}\n\n.game {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 5vh;\n}\n\n.waiting-to-start {\n  margin: auto;\n  top: 50%;\n}\n\n.emoji {\n  display: block;\n  transition: opacity 0.2s linear, transform 0.2s linear;\n}\n\n::selection {\n    background: transparent;\n}\n`\n\nclass Game extends React.Component {\n\n  constructor() {\n    super()\n\n    this.state = _DefaultState\n  }\n\n  componentWillMount() {\n    this._interval = setInterval(() => {\n      this.handleGameTick()\n    }, 200)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this._interval)\n  }\n\n  ////////////////////////////////////////////////////////////////////////////\n  // Event handlers\n  ////////////////////////////////////////////////////////////////////////////\n\n  handleGameTick() {\n      switch (this.state.mode) {\n        case MODE_WAITING_TO_START:\n          break\n        \n        case MODE_PLAYING_LEVEL:\n          const secondsLeftOfLevel = this.state.level.secondsLeftOfLevel - 0.2\n          if (secondsLeftOfLevel < 0) {\n            // Finish game\n            this.setState({\n              mode: MODE_FINISHED,\n              level: null,\n            })\n\n            // Reset game after 5s\n            setTimeout(() => {\n              this.setState({\n                mode: MODE_WAITING_TO_START\n              })\n            }, 5000)\n          }\n          else {\n            this.setState({\n              level: {\n                ...this.state.level,\n                secondsLeftOfLevel\n              }\n            })\n          }\n          break\n\n        case MODE_FINISHED:\n          break\n        \n        default:\n          break\n      }\n  }\n\n  handleInputEmotion(emotion) {\n    switch (this.state.mode) {\n      case MODE_WAITING_TO_START:\n        if (emotion === EMOTION_HAPPY) {\n          this.setState({\n            mode: MODE_PLAYING_LEVEL,\n            points: 0,\n            level: {\n              startedAt: DateTime.local(),\n              secondsLeftOfLevel: GAME_LENGTH_IN_SECONDS,\n              no: 1\n            }\n          })\n        }\n        break\n      \n      case MODE_PLAYING_LEVEL:\n        if (this.state.lastInputEmotion !== emotion) {\n          this.setState({\n            lastInputEmotion: emotion\n          })\n        }\n        break\n      default: break\n    }\n  }\n\n  handleParticleEffect(x, y) {\n    let particleAccelerator = this.refs.particleArea\n    particleAccelerator.createExplosion(x, y)\n  }\n\n  handleLevelComplete() {\n    const nextLevel = this.state.level.no + 1\n    setTimeout(() => {\n      this.setState({\n        level: {\n          ...this.state.level,\n          no: nextLevel\n        }\n      })\n    }, 1000)\n  }\n\n  handleScorePoints(howMany) {\n    this.setState({\n      points: this.state.points + howMany\n    })\n  }\n\n  ////////////////////////////////////////////////////////////////////////////\n  // Render\n  ////////////////////////////////////////////////////////////////////////////\n\n  render() {\n    const {mode, level, lastInputEmotion, points} = this.state\n\n    let main = null\n    let backgroundEffect = null\n    switch (mode) {\n      case MODE_WAITING_TO_START:\n        main = <SceneWaitingToStart />\n        backgroundEffect = 'bubbles'\n        break\n      case MODE_PLAYING_LEVEL:\n        main = <SceneLevel level={level.no}\n                           lastInputEmotion={lastInputEmotion}\n                           onScorePoints={this.handleScorePoints.bind(this)}\n                           onLevelComplete={this.handleLevelComplete.bind(this)}\n                           onParticleEffect={this.handleParticleEffect.bind(this)} />\n        backgroundEffect = 'bubbles'\n        break\n      case MODE_FINISHED:\n        main = <SceneFinished points={this.state.points} />\n        backgroundEffect = 'fireworks'\n        break\n      default: break\n    }\n\n    return (\n      <div className=\"board\">\n        <style global jsx>{CSS}</style>\n        \n        <Head>\n          <title>Computas Emoji Game!</title>\n          <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n          <link href=\"https://fonts.googleapis.com/css?family=Roboto:400,500,700,900\" rel=\"stylesheet\" />\n          <script src=\"/static/lib/proton.min.js\"/>\n        </Head>\n\n        <LevelProgressBar secondsLeft={level ? level.secondsLeftOfLevel : null}\n                          secondsTotal={GAME_LENGTH_IN_SECONDS}/>\n\n        {level ? <ScoreDisplay score={points}/> : null}\n\n        <div className=\"game\">\n          <ParticleArea ref=\"particleArea\" effect={backgroundEffect} />\n\n          {main}\n        </div>\n\n        <DebugControls onInputEmotion={this.handleInputEmotion.bind(this)}/>\n      </div>\n    )\n  }\n}\n\nexport default Game\n\n\n// WEBPACK FOOTER //\n// pages/index.jsx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;;;;;AAkCA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAHA;AAIA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAGA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AACA;AAKA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AAEA;AAFA;AADA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;AAoCA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AASA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAtBA;AAwBA;;;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAFA;AADA;AAMA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;AAGA;AACA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAjBA;AACA;AAmBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;AArKA;AACA;AAuKA;AAAA;;;;;;;;;;;;AArNA;AACA;AACA;AAEA;AAOA;AAkCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}