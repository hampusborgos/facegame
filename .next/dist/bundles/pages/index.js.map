{"version":3,"file":"bundles/pages/index.js","sources":["webpack:///webpack/bootstrap 05325f0f7c90d78bdeb4","webpack:///components/DebugControls.jsx","webpack:///components/Emoji.jsx","webpack:///components/LevelProgressBar.jsx","webpack:///components/ParticleArea.jsx","webpack:///components/ScoreDisplay.jsx","webpack:///game/SceneFinished.jsx","webpack:///game/SceneLevel.jsx","webpack:///game/SceneWaitingToStart.jsx","webpack:///game/index.js","webpack:///pages/index.jsx","webpack:///external \"luxon\"","webpack:///external \"next/head\"","webpack:///external \"react\"","webpack:///external \"styled-jsx/style\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 05325f0f7c90d78bdeb4","import React from 'react'\nimport { EMOTION_CONTENT, EMOTION_ANGRY, EMOTION_SAD, EMOTION_HAPPY, EMOTION_SUPRISED } from '../game'\n\nclass DebugControls extends React.Component\n{\n    handleClick(emotion) {\n        this.props.onInputEmotion(emotion)\n    }\n\n    componentDidMount() {\n    }\n    \n    render() {\n        return (\n            <div className=\"panel\">\n                <style jsx>{`\n                .panel {\n                    height: 50px;\n                    position: absolute;\n                    z-order: 1;\n                    bottom: 30px;\n                    left: 0;\n                    right: 0;\n                }\n\n                .button-group {\n                    margin: auto;\n                    width: 250px;\n                }\n\n                button {\n                    font-size: 30px;\n                    display: inline-block;\n                    background-color: grey;\n                    width: 50px;\n                    height: 40px;\n                }\n\n                button:focus {\n                    outline: none;\n                }\n                `}</style>\n                <div className=\"button-group\">\n                    <button onClick={() => this.handleClick(EMOTION_CONTENT)}>üòê</button>\n                    <button onClick={() => this.handleClick(EMOTION_HAPPY)}>üòÅ</button>\n                    <button onClick={() => this.handleClick(EMOTION_SAD)}>üò©</button>\n                    <button onClick={() => this.handleClick(EMOTION_SUPRISED)}>üò≤</button>\n                    <button onClick={() => this.handleClick(EMOTION_ANGRY)}>üò†</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default DebugControls\n\n\n// WEBPACK FOOTER //\n// components/DebugControls.jsx","import React from 'react'\nimport { EMOTION_CONTENT, EMOTION_ANGRY, EMOTION_SAD, EMOTION_HAPPY, EMOTION_SUPRISED } from '../game'\n\nclass Emoji extends React.Component\n{\n    render() {\n        const {emotion, dead, ...otherProps} = this.props\n        if (dead) {\n            return <span className=\"emoji dead\" {...otherProps}>üòµ</span>\n        }\n\n        switch (emotion) {\n            case EMOTION_CONTENT: return <span className=\"emoji\" {...otherProps}>üòê</span>\n            case EMOTION_HAPPY: return <span className=\"emoji\" {...otherProps}>üòÅ</span>\n            case EMOTION_SAD: return <span className=\"emoji\" {...otherProps}>üò©</span>\n            case EMOTION_SUPRISED: return <span className=\"emoji\" {...otherProps}>üò≤</span>\n            case EMOTION_ANGRY: return <span className=\"emoji\" {...otherProps}>üò†</span>\n            default: return <span className=\"emoji\" {...otherProps}>üòà</span>\n        }\n    }\n}\n\nexport default Emoji\n\n\n// WEBPACK FOOTER //\n// components/Emoji.jsx","import css from 'styled-jsx/css'\nimport React from 'react'\n\nconst CSS = css`\n.level-progress-bar {\n    position: relative;\n    width: 100vw;\n    height: 5vh;\n    background: linear-gradient(to right, #CDD180, #529B88);\n}\n\n.meter {\n    position: absolute;\n    left: 0;\n    top: 0;\n    height: 5vh;\n    width: 100vw;\n    background: linear-gradient(to right, yellow, red);\n    transition: left 0.2s linear, opacity 0.4s ease-in-out;\n}\n\n.meter.hidden {\n    opacity: 0;\n}\n\np {\n    position: absolute;\n    left: 2vh;\n    top: 0;\n    line-height: 5vh;\n    margin-top: 0;\n    font-size: 2vh;\n    font-weight: 400;\n    color: white;\n}\n`\n\n\nclass LevelProgressBar extends React.Component\n{\n    render() {\n        const {secondsLeft, secondsTotal} = this.props\n\n        const progress = secondsLeft / secondsTotal * 100\n\n        return (\n            <div className=\"level-progress-bar\">\n                <style jsx>{CSS}</style>\n\n                {secondsLeft !== null ?\n                    [\n                        <div key={1} className=\"meter\" style={{left: '-' + progress + 'vw'}}/>,\n                        <p key={2}>{secondsLeft.toFixed(0)} seconds remaining</p>,\n                    ]\n                : null}\n            </div>\n        )\n    }\n}\n\nexport default LevelProgressBar\n\n\n// WEBPACK FOOTER //\n// components/LevelProgressBar.jsx","import React from 'react'\n\nclass ParticleArea extends React.Component\n{\n    componentDidMount() {\n        // Only include client side\n        initializeProton(this.refs.container, this.refs.particles);\n\n        this._enableEmitter()\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.effect === this.props.effect)\n            return\n\n        switch (prevProps.effect) {\n            case 'bubbles':\n                disableEmitter(BUBBLES)\n                break\n            case 'fireworks':\n                disableEmitter(FIREWORKS)\n                break\n            default:\n                break\n        }\n\n        this._enableEmitter()\n    }\n\n    _enableEmitter() {\n        switch (this.props.effect) {\n            case 'bubbles':\n                enableEmitter(BUBBLES)\n                break\n            case 'fireworks':\n                enableEmitter(FIREWORKS)\n                break\n            default:\n                break\n        }\n    }\n\n    createExplosion(x, y) {\n        // Transform coordinate system\n        x = (x / 100 + 0.5) * this.refs.container.clientWidth\n        y = (y / 100 + 0.5) * this.refs.container.clientHeight\n        _createExplosion(x, y)\n    }\n\n    componentWillUnmount() {\n        destroy(this.refs.particles)\n    }\n    \n    render() {\n        return (\n            <div ref=\"container\" className=\"background\">\n                <style jsx>{`\n                div {\n                    position: absolute;\n                    left: 0;\n                    right: 0;\n                    bottom: 0;\n                    top: 0;\n                    z-index: -1;\n                }\n                `}</style>\n                <canvas ref=\"particles\"></canvas>\n            </div>\n        )\n    }\n}\n\nconst BUBBLES = 'BUBBLES'\nconst FIREWORKS = 'FIREWORKS'\n\nvar _allEmitters = {};\nvar _proton = null;\nconst bubbleColors = ['#529B88', '#CDD180', '#FFFA32', '#FB6255', '#FB4A53', '#FF4E50', '#F9D423'];\n\nvar initializeProton = null;\nvar enableEmitter = null;\nvar disableEmitter = null;\nvar _createExplosion = null; \n\nif (process.browser) {\n    class ProtonTag extends Proton.Initialize {\n\n        constructor(tag) {\n            super()\n\n            this.tag = tag\n        }\n\n        initialize(particle) {\n            particle.tag = this.tag\n        }\n    }\n\n    initializeProton = function(container, canvas) {\n        canvas.width = container.clientWidth;\n        canvas.height = container.clientHeight;\n        let ctx = canvas.getContext('webgl', { antialias: true, stencil: false, depth: false, preserveDrawingBuffer: true });\n        ctx.globalCompositeOperation = \"darker\";\n\n        createProton(canvas);\n        tick();\n    }\n    \n    function destroy() {\n        _proton.destroy()\n    }\n    \n    function createBubbleEmitter(width, height) {\n        let emitter = new Proton.Emitter();\n        emitter.rate = new Proton.Rate(new Proton.Span(2, 8), new Proton.Span(.05, .2));\n    \n        emitter.addInitialize(new Proton.Mass(1));\n        emitter.addInitialize(new Proton.Radius(20, 200));\n        emitter.addInitialize(new Proton.Life(2, 4));\n        emitter.addInitialize(new Proton.Position(new Proton.RectZone(0, 0, width, height)));\n        emitter.addInitialize(new Proton.Body(['/static/image/logo.png'], 128));\n    \n        emitter.addBehaviour(new Proton.Alpha(0.2, 0.8, Infinity, Proton.easeOutCubic));\n        emitter.addBehaviour(new Proton.Scale(1, 0, Infinity, Proton.easeOutCubic));\n        emitter.addBehaviour(new Proton.Rotate(0, new Proton.Span(-4, 4), 'to', Infinity, Proton.easeOutCubic));\n        emitter.addBehaviour(new Proton.Color(bubbleColors, 'random'));\n    \n        return {\n            emitter: emitter\n        }\n    }\n    \n    function createFireworksExplosionEmitter(x, y, particleCount) {\n        let emitter = new Proton.Emitter();\n        emitter.rate = new Proton.Rate(particleCount, 1);\n        emitter.addInitialize(new Proton.Mass(1));\n        emitter.addInitialize(new Proton.Radius(3, 7));\n        emitter.addInitialize(new Proton.Life(1, 3));\n        emitter.addInitialize(new Proton.V(new Proton.Span(5, 8), new Proton.Span(0, 360), 'polar'));\n        \n        emitter.addBehaviour(new Proton.RandomDrift(10, 10, .05));\n        emitter.addBehaviour(new Proton.Alpha(1, 0));\n        emitter.addBehaviour(new Proton.Gravity(3));\n        var color = Math.random() > .3 ? Proton.MathUtils.randomColor() : 'random';\n        emitter.addBehaviour(new Proton.Color(color));\n        \n        emitter.p.x = x;\n        emitter.p.y = y;\n        emitter.emit('once', true);\n    \n        return emitter\n    }\n    \n    function onParticleDeadMakeFireworks(particle) {\n        if (particle.tag === 'firework') {\n            _proton.addEmitter(createFireworksExplosionEmitter(particle.p.x, particle.p.y, new Proton.Span(250, 300)))\n        }\n    }\n\n    function createFireworksEmitter(width, height) {\n        let emitter = new Proton.Emitter();\n        emitter.rate = new Proton.Rate(new Proton.Span(2, 3), 0.5);\n        \n        emitter.addInitialize(new Proton.Mass(1));\n        emitter.addInitialize(new Proton.Radius(3, 7));\n        emitter.addInitialize(new Proton.P(new Proton.LineZone(10, height, width - 10, height)));\n        emitter.addInitialize(new Proton.Life(0.75, 1.2));\n        emitter.addInitialize(new Proton.V(new Proton.Span(4, 15), new Proton.Span(2, 5, true), 'polar'));\n        emitter.addInitialize(new ProtonTag('firework'))\n    \n        emitter.addBehaviour(new Proton.Gravity(1));\n        emitter.addBehaviour(new Proton.Color('#ff0000', 'random'));\n        \n        return {\n            emitter: emitter,\n            onEnable: (proton) => {\n                proton.addEventListener(Proton.PARTICLE_DEAD, onParticleDeadMakeFireworks);\n            },\n            onDisable: (proton) => {\n                proton.removeEventListener(Proton.PARTICLE_DEAD, onParticleDeadMakeFireworks)\n            },\n        }\n    }\n    \n    function createProton(canvas) {\n        _proton = new Proton;\n        \n        _allEmitters[BUBBLES] = createBubbleEmitter(canvas.width, canvas.height)\n        _allEmitters[FIREWORKS] = createFireworksEmitter(canvas.width, canvas.height)\n    \n        let renderer = new Proton.WebGLRenderer(canvas);\n        renderer.onProtonUpdate = function() {\n            this.gl.clearColor(0, 0, 0, 0.2)\n            this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT)\n        };\n        _proton.addRenderer(renderer);\n    }\n    \n    enableEmitter = function(name) {\n        const emitter = _allEmitters[name]\n        \n        if (emitter.onEnable)\n            emitter.onEnable(_proton)\n\n        emitter.emitter.emit()\n        _proton.addEmitter(emitter.emitter);\n    }\n    \n    disableEmitter = function(name) {\n        const emitter = _allEmitters[name]\n        emitter.emitter.stop()\n        _proton.removeEmitter(emitter.emitter)\n\n        if (emitter.onDisable)\n            emitter.onDisable(_proton)\n    }\n\n    _createExplosion = function(x, y) {\n        _proton.addEmitter(createFireworksExplosionEmitter(x, y, new Proton.Span(100, 120)))\n    }\n    \n    function tick() {\n        requestAnimationFrame(tick)\n        \n        \n        _proton.update()\n    }\n    \n}\n\nexport default ParticleArea\n\n\n// WEBPACK FOOTER //\n// components/ParticleArea.jsx","import css from 'styled-jsx/css'\nimport React from 'react'\n\nconst CSS = css`\n.score-display {\n    position: absolute;\n    top: 2vh;\n    left: 2vh;\n    font-size: 5vh;\n    color: white;\n}\n\nstrong {\n    font-weight: 800;\n}\n\nsmall {\n    margin-left: 0.5em;\n    font-size: 1vh;\n}\n`\n\n\nclass ScoreDisplay extends React.Component\n{\n    render() {\n        const {score} = this.props\n\n        return (\n            <div className=\"score-display\">\n                <style jsx>{CSS}</style>\n\n                <p>\n                    <strong>{score}</strong>\n                    <small>points</small>\n                </p>\n            </div>\n        )\n    }\n}\n\nexport default ScoreDisplay\n\n\n// WEBPACK FOOTER //\n// components/ScoreDisplay.jsx","\nimport Emoji from '../components/Emoji'\nimport React from 'react'\nimport css from 'styled-jsx/css'\nimport { EMOTION_CONTENT, EMOTION_ANGRY, EMOTION_SAD, EMOTION_HAPPY, EMOTION_SUPRISED } from '../game'\n\nconst CSS = css`\n.finished {\n    margin-top: 25vh;\n    font-size: 4vh;\n    text-align: center;\n    color: white;\n}\n\nsmall {\n    font-size: 2vh;\n}\n`\n\nclass SceneFinished extends React.Component {\n\n    render () {\n        const {points} = this.props\n        return (\n            <div className=\"finished\">\n                <style jsx>{CSS}</style>\n\n                <h1>Congrats!</h1>\n                <p>You scored <strong>{points}</strong> points!</p>\n                <p><small>Game will reset in a few seconds ...</small></p>\n            </div>\n        )\n    }\n}\n\nexport default SceneFinished\n\n\n// WEBPACK FOOTER //\n// game/SceneFinished.jsx","\nimport Emoji from '../components/Emoji'\nimport React from 'react'\nimport css from 'styled-jsx/css'\nimport { ALL_EMOTIONS, EMOTION_CONTENT, EMOTION_ANGRY, EMOTION_SAD, EMOTION_HAPPY, EMOTION_SUPRISED } from '../game'\n\nconst CSS = css`\n.level {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    width: 100%;\n    height: 100%;\n}\n\n.level .emoji {\n    position: absolute;\n    font-size: 60px;\n}\n\n.level .emoji.dead {\n    opacity: 0;\n}\n`\n\nconst _DefaultState = {\n    emojis: [],\n    ending: false\n}\n\nclass SceneLevel extends React.Component {\n    constructor() {\n        super()\n\n        this.state = _DefaultState\n    }\n\n    componentDidMount() {\n        this._setLevel(this.props.level)\n    }\n\n    componentDidUpdate(prevProps) {\n        console.dir('level ' + prevProps.level + ' != ' + this.props.level)\n        if (prevProps.level !== this.props.level) {\n            this._setLevel(this.props.level)\n        }\n\n        if (this.props.lastInputEmotion !== prevProps.lastInputEmotion) {\n            const killCount = this._killAllEmojis(this.props.lastInputEmotion)\n            if (killCount > 0) {\n                this.props.onScorePoints(killCount)\n            }\n        }\n\n        if (this.state.emojis.filter(e => !e.dead).length === 0 && !this.state.ending) {\n            this.setState({\n                ending: true\n            })\n\n            this.props.onLevelComplete()\n        }\n    }\n\n    renderEmoji(e, i) {\n        return (\n            <Emoji key={i}\n                   emotion={e.emotion}\n                   dead={e.dead}\n                   style={{\n                        left: e.x + 'vw',\n                        top: e.y + 'vh',\n                    }}\n            />\n        )\n    }\n\n    render () {\n        return (\n            <div className=\"level\">\n                <style global jsx>{CSS}</style>\n\n                {this.state.emojis.map(this.renderEmoji.bind(this))}\n            </div>\n        )\n    }\n\n    _setLevel(levelNo) {\n        this._killAllEmojis()\n        if (levelNo === 1) {\n            this._generateEmojis(5)\n        }\n        else if (levelNo === 2) {\n            this._generateEmojis(10)\n        }\n        else if (levelNo === 3) {\n            this._generateEmojis(20)\n        }\n        else if (levelNo === 4) {\n            this._generateEmojis(30)\n        }\n        else if (levelNo === 5) {\n            this._generateEmojis(40)\n        }\n        else {\n            this._generateEmojis(50)\n        }\n        this.setState({\n            ending: false\n        })\n    }\n\n    _generateEmojis(count) {\n        let emojis = [...this.state.emojis]\n        for (var i = 0; i < count; ++i) {\n            emojis.push(this._newEmoji())\n        }\n\n        this.setState({\n            emojis: emojis\n        })\n    }\n\n    _newEmoji() {\n        return {\n            emotion: this._randomEmotion(),\n            x: -30 + Math.random() * 60,\n            y: -30 + Math.random() * 60,\n        }\n    }\n\n    _killAllEmojis(emotionToKill = '') {\n        let emojis = [...this.state.emojis]\n        let killCount = 0\n        if (emotionToKill === '') {\n            killCount = emojis.filter(e => !e.dead).length\n            emojis = emojis.map(this._killEmoji.bind(this))\n        }\n        else {\n            // Kill specific type\n            emojis = emojis.map(e => {\n                if (e.emotion === emotionToKill && !e.dead) {\n                    killCount++\n                    return this._killEmoji(e)\n                }\n\n                return e\n            })\n        }\n\n        this.setState({\n            emojis: emojis\n        })\n\n        return killCount\n    }\n\n    _killEmoji(emoji) {\n        if (!emoji.dead) {\n            this.props.onParticleEffect(emoji.x, emoji.y)\n        }\n\n        return {\n            ...emoji,\n            dead: true\n        }\n    }\n\n    _randomEmotion() {\n        return ALL_EMOTIONS[Math.floor(Math.random() * ALL_EMOTIONS.length)]\n    }\n}\n\nexport default SceneLevel\n\n\n// WEBPACK FOOTER //\n// game/SceneLevel.jsx","\nimport Emoji from '../components/Emoji'\nimport React from 'react'\nimport css from 'styled-jsx/css'\nimport { EMOTION_CONTENT, EMOTION_ANGRY, EMOTION_SAD, EMOTION_HAPPY, EMOTION_SUPRISED } from '../game'\n\nconst CSS = css`\n.waiting-to-start {\n    margin-top: 25vh;\n    font-size: 150px;\n    text-align: center;\n}\n\np {\n    font-size: 40px;\n    color: white;\n}\n`\n\nclass SceneWaitingToStart extends React.Component {\n\n    render () {\n        return (\n            <div className=\"waiting-to-start\">\n                <style jsx>{CSS}</style>\n\n                <Emoji emotion={EMOTION_HAPPY} style={{\n                    top: '40px'\n                }}/>\n\n                <p>Smile to start the game!</p>\n            </div>\n        )\n    }\n}\n\nexport default SceneWaitingToStart\n\n\n// WEBPACK FOOTER //\n// game/SceneWaitingToStart.jsx","\nexport const EMOTION_HAPPY = 'Happy'\nexport const EMOTION_SAD = 'Sad'\nexport const EMOTION_ANGRY = 'Angry'\nexport const EMOTION_SUPRISED = 'Suprised'\nexport const EMOTION_CONTENT = 'Content'\n\nexport const ALL_EMOTIONS = [EMOTION_HAPPY, EMOTION_SAD, EMOTION_ANGRY, EMOTION_SUPRISED, EMOTION_CONTENT]\n\nexport const GAME_LENGTH_IN_SECONDS = 20\n\nexport { default as SceneWaitingToStart } from './SceneWaitingToStart'\nexport { default as SceneLevel } from './SceneLevel'\nexport { default as SceneFinished } from './SceneFinished'\n\n\n// WEBPACK FOOTER //\n// game/index.js","import ParticleArea from '../components/ParticleArea'\nimport DebugControls from '../components/DebugControls'\nimport Emoji from '../components/Emoji'\nimport LevelProgressBar from '../components/LevelProgressBar'\nimport React from 'react'\nimport Head from 'next/head'\nimport css from 'styled-jsx/css'\nimport { EMOTION_CONTENT, EMOTION_ANGRY, EMOTION_SAD, EMOTION_HAPPY, EMOTION_SUPRISED, SceneWaitingToStart, SceneLevel, SceneFinished, GAME_LENGTH_IN_SECONDS } from '../game'\nimport ScoreDisplay from '../components/ScoreDisplay';\nimport { DateTime } from 'luxon'\n\nconst MODE_WAITING_TO_START = 'WAITING_TO_START'\nconst MODE_PLAYING_LEVEL = 'PLAYING_LEVEL'\nconst MODE_FINISHED = 'FINISHED'\n\nconst _DefaultState = {\n  mode: MODE_WAITING_TO_START,\n  level: null,\n  points: 0,\n  lastInputEmotion: EMOTION_CONTENT,\n}\n\nconst CSS = css`\nhtml, body, #__next, .board {\n  height: 100%;\n  font-family: Roboto, sans-serif;\n}\n\nbody {\n  background: black;\n  margin: 0;\n}\n\n.game {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 5vh;\n}\n\n.waiting-to-start {\n  margin: auto;\n  top: 50%;\n}\n\n.emoji {\n  display: block;\n  transition: opacity 0.2s linear, transform 0.2s linear;\n}\n\n::selection {\n    background: transparent;\n}\n`\n\nclass Game extends React.Component {\n\n  constructor() {\n    super()\n\n    this.state = _DefaultState\n  }\n\n  componentWillMount() {\n    this._interval = setInterval(() => {\n      this.handleGameTick()\n    }, 200)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this._interval)\n  }\n\n  ////////////////////////////////////////////////////////////////////////////\n  // Event handlers\n  ////////////////////////////////////////////////////////////////////////////\n\n  handleGameTick() {\n      switch (this.state.mode) {\n        case MODE_WAITING_TO_START:\n          break\n        \n        case MODE_PLAYING_LEVEL:\n          const secondsLeftOfLevel = this.state.level.secondsLeftOfLevel - 0.2\n          if (secondsLeftOfLevel < 0) {\n            // Finish game\n            this.setState({\n              mode: MODE_FINISHED,\n              level: null,\n            })\n\n            // Reset game after 5s\n            setTimeout(() => {\n              this.setState({\n                mode: MODE_WAITING_TO_START\n              })\n            }, 5000)\n          }\n          else {\n            this.setState({\n              level: {\n                ...this.state.level,\n                secondsLeftOfLevel\n              }\n            })\n          }\n          break\n\n        case MODE_FINISHED:\n          break\n        \n        default:\n          break\n      }\n  }\n\n  handleInputEmotion(emotion) {\n    switch (this.state.mode) {\n      case MODE_WAITING_TO_START:\n        if (emotion === EMOTION_HAPPY) {\n          this.setState({\n            mode: MODE_PLAYING_LEVEL,\n            points: 0,\n            level: {\n              startedAt: DateTime.local(),\n              secondsLeftOfLevel: GAME_LENGTH_IN_SECONDS,\n              no: 1\n            }\n          })\n        }\n        break\n      \n      case MODE_PLAYING_LEVEL:\n        if (this.state.lastInputEmotion !== emotion) {\n          this.setState({\n            lastInputEmotion: emotion\n          })\n        }\n        break\n      default: break\n    }\n  }\n\n  handleParticleEffect(x, y) {\n    let particleAccelerator = this.refs.particleArea\n    particleAccelerator.createExplosion(x, y)\n  }\n\n  handleLevelComplete() {\n    const nextLevel = this.state.level.no + 1\n    setTimeout(() => {\n      this.setState({\n        level: {\n          ...this.state.level,\n          no: nextLevel\n        }\n      })\n    }, 1000)\n  }\n\n  handleScorePoints(howMany) {\n    this.setState({\n      points: this.state.points + howMany\n    })\n  }\n\n  ////////////////////////////////////////////////////////////////////////////\n  // Render\n  ////////////////////////////////////////////////////////////////////////////\n\n  render() {\n    const {mode, level, lastInputEmotion, points} = this.state\n\n    let main = null\n    let backgroundEffect = null\n    switch (mode) {\n      case MODE_WAITING_TO_START:\n        main = <SceneWaitingToStart />\n        backgroundEffect = 'bubbles'\n        break\n      case MODE_PLAYING_LEVEL:\n        main = <SceneLevel level={level.no}\n                           lastInputEmotion={lastInputEmotion}\n                           onScorePoints={this.handleScorePoints.bind(this)}\n                           onLevelComplete={this.handleLevelComplete.bind(this)}\n                           onParticleEffect={this.handleParticleEffect.bind(this)} />\n        backgroundEffect = 'bubbles'\n        break\n      case MODE_FINISHED:\n        main = <SceneFinished points={this.state.points} />\n        backgroundEffect = 'fireworks'\n        break\n      default: break\n    }\n\n    return (\n      <div className=\"board\">\n        <style global jsx>{CSS}</style>\n        \n        <Head>\n          <title>Computas Emoji Game!</title>\n          <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n          <link href=\"https://fonts.googleapis.com/css?family=Roboto:400,500,700,900\" rel=\"stylesheet\" />\n          <script src=\"/static/lib/proton.min.js\"/>\n        </Head>\n\n        <LevelProgressBar secondsLeft={level ? level.secondsLeftOfLevel : null}\n                          secondsTotal={GAME_LENGTH_IN_SECONDS}/>\n\n        {level ? <ScoreDisplay score={points}/> : null}\n\n        <div className=\"game\">\n          <ParticleArea ref=\"particleArea\" effect={backgroundEffect} />\n\n          {main}\n        </div>\n\n        <DebugControls onInputEmotion={this.handleInputEmotion.bind(this)}/>\n      </div>\n    )\n  }\n}\n\nexport default Game\n\n\n// WEBPACK FOOTER //\n// pages/index.jsx","module.exports = require(\"luxon\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"luxon\"\n// module id = luxon\n// module chunks = 3","module.exports = require(\"next/head\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"next/head\"\n// module id = next/head\n// module chunks = 3","module.exports = require(\"react\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react\"\n// module id = react\n// module chunks = 3","module.exports = require(\"styled-jsx/style\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"styled-jsx/style\"\n// module id = styled-jsx/style\n// module chunks = 3"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AACA;;;;;;;;;;;;;AAEA;AACA;AACA;;;AAEA;;;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAhDA;AACA;AAkDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAQA;;;;AAhBA;AACA;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AAEA;;;;;AAmCA;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AAnBA;AACA;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DA;AACA;AACA;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AARA;AACA;AAUA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AARA;AAUA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAnEA;AACA;AAqEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAyBA;AACA;AACA;AA3BA;AA6BA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AA/CA;AAiDA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AApEA;AAsEA;AACA;AACA;AACA;AACA;AA1EA;AA4EA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAnGA;AAqGA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAjHA;AA0IA;AACA;AAEA;AACA;AACA;AA/IA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAHA;AAIA;AACA;AARA;AAAA;AAAA;AAUA;AACA;AAXA;AACA;AADA;AAAA;AACA;AAaA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AA2FA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrOA;AAEA;;;;;AAoBA;;;;;;;;;;;;;AAEA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAfA;AACA;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCA;AACA;AAEA;AAEA;;;;;AAaA;;;;;;;;;;;;;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAbA;AACA;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AAEA;AAEA;;;;AAmBA;AACA;AACA;AAFA;AACA;AAIA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAHA;AAIA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAIA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAAA;AAAA;AAAA;AAAA;AASA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;;;AAEA;AACA;AACA;;;;AA3IA;AACA;AA6IA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3KA;AACA;AAEA;AAEA;;;;;AAaA;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAdA;AACA;AAgBA;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;;;;;AAkCA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAHA;AAIA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAGA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AACA;AAKA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AAEA;AAFA;AADA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;AAoCA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AASA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAtBA;AAwBA;;;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAFA;AADA;AAMA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;AAGA;AACA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAjBA;AACA;AAmBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AArKA;AACA;AAuKA;;;;;;;;;;;;;;;AChOA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;A","sourceRoot":""}