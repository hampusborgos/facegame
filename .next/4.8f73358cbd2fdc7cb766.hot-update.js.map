{"version":3,"file":"4.8f73358cbd2fdc7cb766.hot-update.js","sources":["webpack:///components/DebugControls.jsx","webpack:///components/Emoji.jsx","webpack:///game/SceneLevel.jsx","webpack:///game/SceneWaitingToStart.jsx","webpack:///game/index.js","webpack:///pages/index.jsx"],"sourcesContent":["import React from 'react'\nimport { EMOTION_CONTENT, EMOTION_ANGRY, EMOTION_SAD, EMOTION_HAPPY, EMOTION_SUPRISED } from '../game'\n\nclass DebugControls extends React.Component\n{\n    handleClick(emotion) {\n        this.props.onInputEmotion(emotion)\n    }\n\n    componentDidMount() {\n    }\n    \n    render() {\n        return (\n            <div className=\"panel\">\n                <style jsx>{`\n                .panel {\n                    height: 50px;\n                    position: absolute;\n                    z-order: 1;\n                    bottom: 30px;\n                    left: 0;\n                    right: 0;\n                }\n\n                .button-group {\n                    margin: auto;\n                    width: 250px;\n                }\n\n                button {\n                    font-size: 30px;\n                    display: inline-block;\n                    background-color: grey;\n                    width: 50px;\n                    height: 40px;\n                }\n\n                button:focus {\n                    outline: none;\n                }\n                `}</style>\n                <div className=\"button-group\">\n                    <button onClick={() => this.handleClick(EMOTION_CONTENT)}>üòê</button>\n                    <button onClick={() => this.handleClick(EMOTION_HAPPY)}>üòÅ</button>\n                    <button onClick={() => this.handleClick(EMOTION_SAD)}>üò©</button>\n                    <button onClick={() => this.handleClick(EMOTION_SUPRISED)}>üò≤</button>\n                    <button onClick={() => this.handleClick(EMOTION_ANGRY)}>üò°</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default DebugControls\n\n\n// WEBPACK FOOTER //\n// components/DebugControls.jsx","import React from 'react'\nimport { EMOTION_CONTENT, EMOTION_ANGRY, EMOTION_SAD, EMOTION_HAPPY, EMOTION_SUPRISED } from '../game'\n\nclass Emoji extends React.Component\n{\n    render() {\n        const {emotion, ...otherProps} = this.props\n        switch (emotion) {\n            case EMOTION_CONTENT: return <span className=\"emoji\" {...otherProps}>üòê</span>\n            case EMOTION_HAPPY: return <span className=\"emoji\" {...otherProps}>üòÅ</span>\n            case EMOTION_SAD: return <span className=\"emoji\" {...otherProps}>üò©</span>\n            case EMOTION_SUPRISED: return <span className=\"emoji\" {...otherProps}>üò≤</span>\n            case EMOTION_ANGRY: return <span className=\"emoji\" {...otherProps}>üò†</span>\n            default: return <span className=\"emoji\" {...otherProps}>üòà</span>\n        }\n    }\n}\n\nexport default Emoji\n\n\n// WEBPACK FOOTER //\n// components/Emoji.jsx","\nimport Emoji from '../components/Emoji'\nimport React from 'react'\nimport css from 'styled-jsx/css'\nimport { ALL_EMOTIONS, EMOTION_CONTENT, EMOTION_ANGRY, EMOTION_SAD, EMOTION_HAPPY, EMOTION_SUPRISED } from '../game'\n\nconst CSS = css`\n.level {\n    margin-top: 25vh;\n    font-size: 150px;\n    text-align: center;\n}\n\n.level .emoji {\n    position: absolute;\n    left: 50vh;\n    top: 50vh;\n}\n`\n\nconst _DefaultState = {\n    emojis: []\n}\n\nclass SceneLevel extends React.Component {\n    componentDidMount() {\n        this._setLevel(this.props.level)\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.level != this.props.level) {\n            this._setLevel(this.props.level)\n        }\n    }\n\n    renderEmoji(e) {\n        return <Emoji emotion={e.emotion} style={{\n            left: ''\n        }} />\n    }\n\n    render () {\n        return (\n            <div className=\"level\">\n                <style global jsx>{CSS}</style>\n\n                {this.state.emojis.map((e) => {\n                    return renderEmoji(e)\n                })}\n            </div>\n        )\n    }\n\n    _setLevel(levelNo) {\n        if (levelNo === 1) {\n            this._generateEmojis(10)\n        }\n    }\n\n    _generateEmojis(count) {\n        let emojis = [...this.state.emojis]\n        for (var i = 0; i < count; ++i) {\n            emoji.push(this._newEmoji())\n        }\n    }\n\n    _newEmoji() {\n        return {\n            emotion: EMOTION_HAPPY,\n        }\n    }\n\n    _killEmoji(emoji) {\n        \n    }\n\n    _randomEmotion() {\n        return ALL_EMOTIONS[Math.floor(Math.random() * ALL_EMOTIONS.length)]\n    }\n}\n\nexport default SceneLevel\n\n\n// WEBPACK FOOTER //\n// game/SceneLevel.jsx","\nimport Emoji from '../components/Emoji'\nimport React from 'react'\nimport css from 'styled-jsx/css'\nimport { EMOTION_CONTENT, EMOTION_ANGRY, EMOTION_SAD, EMOTION_HAPPY, EMOTION_SUPRISED } from '../game'\n\nconst CSS = css`\n.waiting-to-start {\n    margin-top: 25vh;\n    font-size: 150px;\n    text-align: center;\n}\n\np {\n    font-size: 40px;\n    color: white;\n}\n`\n\nclass SceneWaitingToStart extends React.Component {\n\n    render () {\n        return (\n            <div className=\"waiting-to-start\">\n                <style jsx>{CSS}</style>\n\n                <Emoji emotion={EMOTION_HAPPY} style={{\n                    top: '40px'\n                }}/>\n\n                <p>Smile to start the game!</p>\n            </div>\n        )\n    }\n}\n\nexport default SceneWaitingToStart\n\n\n// WEBPACK FOOTER //\n// game/SceneWaitingToStart.jsx","\nexport const EMOTION_HAPPY = 'Happy'\nexport const EMOTION_SAD = 'Sad'\nexport const EMOTION_ANGRY = 'Angry'\nexport const EMOTION_SUPRISED = 'Suprised'\nexport const EMOTION_CONTENT = 'Content'\n\nexport const ALL_EMOTIONS = [EMOTION_HAPPY, EMOTION_SAD, EMOTION_ANGRY, EMOTION_SUPRISED, EMOTION_CONTENT]\n\nexport const GAME_LENGTH_IN_SECONDS = 20\n\nexport { default as SceneWaitingToStart } from './SceneWaitingToStart'\nexport { default as SceneLevel } from './SceneLevel'\nexport { default as SceneFinished } from './SceneFinished'\n\n\n// WEBPACK FOOTER //\n// game/index.js","import ParticleArea from '../components/ParticleArea'\nimport DebugControls from '../components/DebugControls'\nimport Emoji from '../components/Emoji'\nimport LevelProgressBar from '../components/LevelProgressBar'\nimport React from 'react'\nimport Head from 'next/head'\nimport css from 'styled-jsx/css'\nimport { EMOTION_CONTENT, EMOTION_ANGRY, EMOTION_SAD, EMOTION_HAPPY, EMOTION_SUPRISED, SceneWaitingToStart, SceneLevel, SceneFinished, GAME_LENGTH_IN_SECONDS } from '../game'\nimport ScoreDisplay from '../components/ScoreDisplay';\nimport { DateTime } from 'luxon'\n\nconst MODE_WAITING_TO_START = 'WAITING_TO_START'\nconst MODE_PLAYING_LEVEL = 'PLAYING_LEVEL'\nconst MODE_FINISHED = 'FINISHED'\n\nconst _DefaultState = {\n  mode: MODE_WAITING_TO_START,\n  level: null,\n}\n\nconst CSS = css`\nhtml, body, #__next, .board {\n  height: 100%;\n  font-family: Roboto, sans-serif;\n}\n\nbody {\n  background: black;\n  margin: 0;\n}\n\n.game {\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 5vh;\n}\n\n.waiting-to-start {\n  margin: auto;\n  top: 50%;\n}\n\n.emoji {\n  display: block;\n  transition: opacity 0.2s linear, transform 0.2s linear;\n}\n\n::selection {\n    background: transparent;\n}\n`\n\nclass Game extends React.Component {\n\n  constructor() {\n    super()\n\n    this.state = _DefaultState\n  }\n\n  componentWillMount() {\n    this._interval = setInterval(() => {\n      this.handleGameTick()\n    }, 200)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this._interval)\n  }\n\n  ////////////////////////////////////////////////////////////////////////////\n  // Event handlers\n  ////////////////////////////////////////////////////////////////////////////\n\n  handleGameTick() {\n      switch (this.state.mode) {\n        case MODE_WAITING_TO_START:\n          break\n        \n        case MODE_PLAYING_LEVEL:\n          const secondsLeftOfLevel = this.state.level.secondsLeftOfLevel - 0.2\n          if (secondsLeftOfLevel < 0) {\n            // Finish game\n            this.setState({\n              mode: MODE_FINISHED,\n              level: null,\n            })\n\n            // Reset game after 5s\n            setTimeout(() => {\n              this.setState({\n                mode: MODE_WAITING_TO_START\n              })\n            }, 5000)\n          }\n          else {\n            if (Math.random() < 0.1) {\n              this.setState({\n                points: this.state.points + Math.floor(Math.random() * 10)\n              })\n            }\n\n            this.setState({\n              level: {\n                ...this.state.level,\n                secondsLeftOfLevel\n              }\n            })\n          }\n          break\n\n        case MODE_FINISHED:\n          break\n        \n        default:\n          break\n      }\n  }\n\n  handleInputEmotion(emotion) {\n    switch (this.state.mode) {\n      case MODE_WAITING_TO_START:\n        if (emotion == EMOTION_HAPPY) {\n          this.setState({\n            mode: MODE_PLAYING_LEVEL,\n            points: 0,\n            level: {\n              startedAt: DateTime.local(),\n              secondsLeftOfLevel: GAME_LENGTH_IN_SECONDS\n            }\n          })\n        }\n        break\n        default: break\n    }\n  }\n\n\n  ////////////////////////////////////////////////////////////////////////////\n  // Render\n  ////////////////////////////////////////////////////////////////////////////\n\n  render() {\n    const {mode, level, points} = this.state\n\n    let main = null\n    let backgroundEffect = null\n    switch (mode) {\n      case MODE_WAITING_TO_START:\n        main = <SceneWaitingToStart />\n        backgroundEffect = 'bubbles'\n        break\n      case MODE_PLAYING_LEVEL:\n        main = <SceneLevel level={0} />\n        backgroundEffect = 'bubbles'\n        break\n      case MODE_FINISHED:\n        main = <SceneFinished points={this.state.points} />\n        backgroundEffect = 'fireworks'\n        break\n      default: break\n    }\n\n    return (\n      <div className=\"board\">\n        <style global jsx>{CSS}</style>\n        \n        <Head>\n          <title>Computas Emoji Game!</title>\n          <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n          <link href=\"https://fonts.googleapis.com/css?family=Roboto:400,500,700,900\" rel=\"stylesheet\" />\n          <script src=\"/static/lib/proton.min.js\"/>\n        </Head>\n\n        <LevelProgressBar secondsLeft={level ? level.secondsLeftOfLevel : null}\n                          secondsTotal={GAME_LENGTH_IN_SECONDS}/>\n\n        {level ? <ScoreDisplay score={points}/> : null}\n\n        <div className=\"game\">\n          <ParticleArea effect={backgroundEffect} />\n\n          {main}\n        </div>\n\n        <DebugControls onInputEmotion={this.handleInputEmotion.bind(this)}/>\n      </div>\n    )\n  }\n}\n\nexport default Game\n\n\n// WEBPACK FOOTER //\n// pages/index.jsx"],"mappings":"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","sourceRoot":""}